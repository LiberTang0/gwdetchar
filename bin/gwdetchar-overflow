#!/usr/bin/env python
# coding=utf-8
# Copyright (C) LIGO Scientific Collaboration (2015-)
#
# This file is part of the GW DetChar python package.
#
# GW DetChar is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GW DetChar is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GW DetChar.  If not, see <http://www.gnu.org/licenses/>.

"""Find overflows associated with a particular front-end model
"""

import argparse
import numpy
import os.path
import sys

from glue.ligolw.utils import write_fileobj

from gwpy.segments import (DataQualityFlag, Segment, SegmentList)
from gwpy.timeseries import (TimeSeries, TimeSeriesDict)
from gwpy.io.cache import cache_segments

from gwdetchar import (cli, const, overflow, version)
from gwdetchar.io import (datafind, ligolw)

__author__ = 'TJ Massinger <thomas.massinger@ligo.org>'
__credits__ = 'Duncan Macleod <duncan.macleod@ligo.org>'
__version__ = version.version

def table_from_times(times, channel):
    return ligolw.sngl_burst_from_times(
        times, snr=10, peak_frequency=100, channel=channel,
        search=os.path.basename(__file__))


parser = argparse.ArgumentParser(description=__doc__)
cli.add_gps_start_stop_arguments(parser)
cli.add_ifo_option(parser)
parser.add_argument('dcuid', type=int, nargs='+',
                    help='DCUID for the relevant front-end model')
cli.add_frametype_option(parser, required=const.IFO is None,
                         default=const.IFO is not None and '%s_R' % const.IFO)
cli.add_nproc_option(parser)
parser.add_argument('--deep', action='store_true', default=False,
                    help='perform deep scan, default: %(default)s')
parser.add_argument('-a', '--state-flag', metavar='FLAG',
                    help='restrict search to times when FLAG was active')
parser.add_argument('-o', '--output-file',
                    help='path to output xml file, default: stdout')
parser.add_argument('-O', '--output-format', default='sngl_burst',
                    choices=['sngl_burst', 'segments', 'integer-segments'],
                    help='output format, default: %(default)s')
parser.add_argument('-p', '--segment-pad', type=float, default=0.1,
                    help='minimum padding (one-sided) for output segments '
                         'when using --output-format '
                         '[segments|integer-segments]')
parser.add_argument('-s', '--segment-end-pad', type=float, default=1.0,
                    help='amount of time to remove from the end of each '
                         'analysis segment')
args = parser.parse_args()

# get segments
if args.state_flag:
    segs = DataQualityFlag.query(args.state_flag, args.gpsstart.seconds,
                                 args.gpsend.seconds,
                                 url=const.O1_SEGMENT_SERVER).active
else:
    segs = SegmentList([Segment(args.gpsstart, args.gpsend)])

# get frame cache
cache = datafind.find_frames(args.ifo[0], args.frametype,
                             args.gpsstart.seconds, args.gpsend.seconds)
cachesegs = segs & cache_segments(cache)

# get channel and find overflows
table = None
for dcuid in args.dcuid:
    channel = overflow.ligo_accum_overflow_channel(dcuid, args.ifo)
    for seg in cachesegs:
        c = cache.sieve(segment=seg)
        if (seg[1]-args.segment_end_pad) < seg[0]:
            continue
        data = TimeSeries.read(c, channel, nproc=args.nproc,
                               start=seg[0], end=seg[1]-args.segment_end_pad)
        times = overflow.find_overflows(data)

        if args.deep and times.size > 0:
            channels = overflow.ligo_model_overflow_channels(
                dcuid, args.ifo, args.frametype, gpstime=int(times[0]))
            for t in times:
                data = TimeSeriesDict.read(c, channels, nproc=args.nproc,
                                           start=int(t-2), end=int(t+2))
                for ch in channels:
                    times = overflow.find_overflows(data[ch])
                    if table is None:
                        table = table_from_times(times, ch)
                        extend = table.extend
                    else:
                        extend(table_from_times(times, ch))
        else:
            if table is None:
                table = table_from_times(times, channel)
                extend = table.extend
            else:
                extend(table_from_times(times, channel))

if args.output_file:
    file = open(args.output_file, 'w')
    gz = args.output_file.endswith('.gz')
else:
    file = sys.stdout
    gz = False
if args.output_format == 'sngl_burst':
    write_fileobj(ligolw.table_to_document(table), file, gz=gz)
else:
    segs = ligolw.segments_from_sngl_burst(table, args.segment_pad, known=segs)
    if args.output_format == 'integer-segments':
        for key in segs:
            segs[key] = segs[key].round()
    segs.write(file, format='ligolw', gz=gz)
if args.output_file:
    file.close()
